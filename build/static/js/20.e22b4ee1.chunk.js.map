{"version":3,"sources":["views/ReportProvInstall.jsx"],"names":["require","ReportProvInstall","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resp","wrap","_context","prev","next","TriggerReportProvInstall","getReportProvInstall","sent","stop","apply","arguments","useEffect","columns","title","_jsx","style","backgroundColor","color","children","dataIndex","key","render","text","_jsxs","_Fragment","className","display","justifyContent","padding","marginBottom","Button","onClick","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","date","Date","stringDate","getDay","getMonth","getFullYear","excelFile","Blob","saveAs","concat","CloudDownloadOutlined","ReloadOutlined","Card","zIndex","Table","dataSource","scroll","x"],"mappings":"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","file":"static/js/20.e22b4ee1.chunk.js","sourcesContent":["import { Card, Table, Button } from \"antd\";\r\nimport { React, useEffect, useState } from \"react\";\r\nimport { CloudDownloadOutlined,ReloadOutlined } from \"@ant-design/icons\";\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport {\r\n  getReportProvInstall,\r\n  TriggerReportProvInstall\r\n} from \"../appRedux/services\";\r\nimport moment from \"moment\";\r\nrequire(\"moment-timezone\");\r\n\r\nconst ReportProvInstall = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onSubmit = async () => {\r\n    setLoading(true);\r\n    await TriggerReportProvInstall();\r\n    const resp = await getReportProvInstall();\r\n    setData(resp);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    onSubmit();\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Sede\r\n        </span>\r\n      ),\r\n      dataIndex: \"sede\",\r\n      key: \"sede\",\r\n      render: (text) => <strong>{text}</strong>,\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Programa\r\n        </span>\r\n      ),\r\n      dataIndex: \"programa\",\r\n      key: \"programa\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Sub Programa\r\n        </span>\r\n      ),\r\n      dataIndex: \"subPrograma\",\r\n      key: \"subPrograma\",\r\n      render: (text) => <strong>{text}</strong>,\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Especialidad\r\n        </span>\r\n      ),\r\n      dataIndex: \"especialidad\",\r\n      key: \"especialidad\",\r\n      render: (text) => <strong>{text}</strong>,\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Canal de Atencion\r\n        </span>\r\n      ),\r\n      dataIndex: \"cnlAtencion\",\r\n      key: \"cnlAtencion\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Mes Calendario\r\n        </span>\r\n      ),\r\n      dataIndex: \"mesCal\",\r\n      key: \"mesCal\",\r\n      render: (text) => <strong>{text}</strong>,\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Cupos Requeridos Netos\r\n        </span>\r\n      ),\r\n      dataIndex: \"cupsReqNetos\",\r\n      key: \"cupsReqNetos\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Cupos Requeridos Pendientes\r\n        </span>\r\n      ),\r\n      dataIndex: \"cupsReqPend\",\r\n      key: \"cupsReqPend\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Cupos Habilitados Netos\r\n        </span>\r\n      ),\r\n      dataIndex: \"cupsHabNetos\",\r\n      key: \"cupsHabNetos\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Cupos Habilitados Pendientes\r\n        </span>\r\n      ),\r\n      dataIndex: \"cupsHabPendientes\",\r\n      key: \"cupsHabPendientes\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Proyeccion Neta\r\n        </span>\r\n      ),\r\n      dataIndex: \"proyecNeta\",\r\n      key: \"proyecNeta\",\r\n    },\r\n    {\r\n      title: (\r\n        <span style={{ backgroundColor: \"#184F9D\", color: \"#fff\" }}>\r\n          Proyeccion Pendiente\r\n        </span>\r\n      ),\r\n      dataIndex: \"proyectPendiente\",\r\n      key: \"proyectPendiente\",\r\n    }\r\n  ];\r\n\r\n  const downloadExcel = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n    const date = new Date();\r\n\r\n    const stringDate = date.getDay() +'/'+ (date.getMonth()+1) +\"/\"+ date.getFullYear();\r\n\r\n    const excelFile = new Blob([excelBuffer], { type: fileType });\r\n    saveAs(excelFile, `Proyeccion Instalada-${stringDate}` + fileExtension);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"gx-profile-banner\"\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          padding: \"32px 32px 70px\",\r\n        }}\r\n      >\r\n        <div className=\"gx-profile-container\">\r\n          <div\r\n            className=\"gx-profile-banner-top\"\r\n            style={{ justifyContent: \"space-between\", marginBottom: \"10px\" }}\r\n          >\r\n            <Button onClick={downloadExcel} \r\n            style={{ backgroundColor: \"#484d55\", color: \"#FFF\" }}> \r\n            <CloudDownloadOutlined />             \r\n              Descargar Excel\r\n            </Button>\r\n\r\n            <Button onClick={onSubmit}>    \r\n            <ReloadOutlined />          \r\n              Actualizar\r\n            </Button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <Card style={{ zIndex: 2 }}>\r\n        <Table\r\n          columns={columns}\r\n          loading={loading}\r\n          dataSource={data}\r\n          scroll={{ x: 1300 }}\r\n        />\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReportProvInstall;\r\n"],"sourceRoot":""}